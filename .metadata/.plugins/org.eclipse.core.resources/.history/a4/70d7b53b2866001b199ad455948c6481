package lab4.gui;
import java.util.Observable;
import java.util.Observer;

import javax.swing.*;

import lab4.client.GomokuClient;
import lab4.data.GomokuGrid;
import lab4.data.GomokuGameState;

/*
 * The GUI class
 */

public class GomokuGUI implements Observer{

	private JFrame frame;
	private JLabel messageLabel;
	private JPanel panel;
	
	private JButton connectButton;
	private JButton newGameButton;
	private JButton disconnectButton;

    private GamePanel gameGridPanel;
    private GomokuClient client;
    private GomokuGameState gamestate;
	
	/**
	 * The constructor
	 * 
	 * @param g   The game state that the GUI will visualize
	 * @param c   The client that is responsible for the communication
	 */
public GomokuGUI(GomokuGameState g, GomokuClient c){
    	
        this.client = c;
        this.gamestate = g;
        client.addObserver(this);
        gamestate.addObserver(this);
        
        frame = new JFrame("Gomoku");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        panel = new JPanel();
        
        //knapparna
        connectButton = new JButton("connect");
        newGameButton = new JButton("New game");
        disconnectButton = new JButton("Disconnect");
        
        gameGridPanel = new GamePanel(gamestate.getGameGrid());
        
        //anonyma klass som körs varje gång någon klickar på fönstret
        gameGridPanel.addMouseListener(new MouseAdapter(){
        	public void mouseClicked(MouseEvent e){
        		//hämtar korrekt index för positionen där man klickar.
        		int[] gridPosition = gameGridPanel.getGridPosition(e.getX(), e.getY());

        		//sätter ut en kula där man klickar 
        		gamestate.move(gridPosition[0], gridPosition[1]);
                gameGridPanel.grid = gamestate.getGameGrid();
        	}
        });
        
        this.connectButton.addActionListener(new ActionListener() {

			@Override
			//tilldelar knappen connect
			public void actionPerformed(ActionEvent arg0) {
				ConnectionWindow connectWin = new ConnectionWindow(c);
			}
        	
        });
        this.newGameButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				gamestate.newGame();
			}
        	
        });

        this.disconnectButton.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				gamestate.disconnect();
			}
        	
        });
        
        panel.add(gameGridPanel);
        panel.add(connectButton);
        panel.add(newGameButton);
        panel.add(disconnectButton);
        
        messageLabel = new JLabel();
        messageLabel.setText("Welcome to Gomoku!");
        panel.add(messageLabel);
		
		frame.pack();
        frame.setSize(325, 450);
        frame.add(panel);
        frame.setVisible(true);
    }


	public void update(Observable arg0, Object arg1) {

        // Update the buttons if the connection status has changed
        if(arg0 == client){
            if(client.getConnectionStatus() == GomokuClient.UNCONNECTED){
                connectButton.setEnabled(true);
                newGameButton.setEnabled(false);
                disconnectButton.setEnabled(false);
            }else{
                connectButton.setEnabled(false);
                newGameButton.setEnabled(true);
                disconnectButton.setEnabled(true);
            }
        }

        // Update the status text if the gamestate has changed
        if(arg0 == gamestate){
            messageLabel.setText(gamestate.getMessageString());
        }
        gameGridPanel.update(arg0, arg1);

    }
	
}
