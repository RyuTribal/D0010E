package CustomerSimulator.models;

import java.util.ArrayList;

import random.ExponentialRandomStream;
import random.UniformRandomStream;

public class Store {
	private boolean simRunning;
	private int maxPeople;
	private double timeOpen;
    private double lambda;
    private double[] pickMinMax;
    private double[] payMinMax;
    private long seed;
    private int peopleInStore = 0;
    private int totalAmountOfCustomers = 0;
    private int missedCustomers = 0;
    private ArrayList<Customer> CustomerID = new ArrayList<Customer>();
    private double currentTime = 0.0;
    private int totAmOfRegs;
    private ExponentialRandomStream ArrivalTime;
    private UniformRandomStream PickTime;
    private UniformRandomStream PayTime;
    private int customersDone = 0;
    private double customerQueueTime;
    private ArrayList<Integer> payQueue = new ArrayList<>();
	public Store(double timeOpen, int cashiers, int maxPeople, double lambda, double[] pickMinMax, double[] payMinMax, long seed) {
		this.totAmOfRegs = cashiers;
        this.maxPeople = maxPeople;
        this.lambda = lambda;
        this.pickMinMax = pickMinMax;
        this.payMinMax = payMinMax;
        this.seed = seed;
        this.ArrivalTime = new ExponentialRandomStream(lambda,seed);
        this.PickTime = new UniformRandomStream(pickMinMax[0], pickMinMax[1], seed);
        this.PayTime = new UniformRandomStream(payMinMax[0], payMinMax[1], seed);
        this.simRunning = true;
        this.timeOpen = timeOpen;
	}
	
	public double getNextArrived() {
        return ArrivalTime.next();
    }
	
	public double getNextPickTime() {
        return PickTime.next();
    }

    public double getNextPayTime() {
        return PayTime.next();
    }
    public void closeStore() {
    	this.simRunning = false;
    }
    
    public double getMaxTime() {
    	return timeOpen;
    }
    
    public boolean getStatus() {
    	return this.simRunning;
    }
    
    public int getNewCustomerId() {
    	return this.CustomerID.size();
    }
    public void addCustomer(Customer c) {
    	this.CustomerID.add(c);
    }
    public int getPeopleInStore() {
        return peopleInStore;
    }

    public int getMaxPeople() {
        return maxPeople;
    }

    public void increasePeopleInStore() {
        peopleInStore++;
    }

    public void decreasePeopleInStore() {
        peopleInStore--;
    }
    
    public void toQueue(int id) {
    	this.payQueue.add(id);
    }
    
    public int getFirstPay() {
    	return this.payQueue.get(0);
    }
    
    public void setQueueTime(double time) {
    	this.customerQueueTime = time;
    }
    
}
