package lab4.data;

import java.util.Observable;
import java.util.Observer;

import lab4.client.GomokuClient;

public class GomokuGameState extends Observable implements Observer {
	private GomokuClient client = null;
	private GomokuGrid grid = null;
	private final int DEFAULT_SIZE = 19;
	private final int NOT_STARTED = 0;
	private final int MY_TURN = 1;
	private final int OTHER_TURN = 2;
	private final int FINISHED = 3;
	private int currentState = 0;
	private String message = "";
	public GomokuGameState(GomokuClient gc){
		client = gc;
		grid = new GomokuGrid(DEFAULT_SIZE);
	}
	public String getMessageString(){
		return message;
	}
	public GomokuGrid getGameGrid() {
		return this.grid;
	}
	public void move(int x, int y) {
		if(currentState == MY_TURN && this.grid.move(x, y, 1)) {
			message = "You moved to square (" + x +", " + y + ").";
			client.sendMoveMessage(x, y);
		}
		else {
			message = "This move is not possible at current time";
		}
		setChanged();
		notifyObservers();
		
	}
	public void receivedMove(int x, int y) {
		if(currentState == OTHER_TURN &&this.grid.move(x, y, 2)) {
			message = "Opponent moved to square (" + x + ", " + y + ").";
			message = "The opponent has won the game";
		}
		else {
			message = "This move is not possible at current time";
		}
		
		
	}
	public void newGame() {
		client.run();
	}
	public void update(Observable o, Object arg) {
			
		switch(client.getConnectionStatus()){
		case GomokuClient.CLIENT:
			message = "Game started, it is your turn!";
			currentState = MY_TURN;
			break;
		case GomokuClient.SERVER:
			message = "Game started, waiting for other player...";
			currentState = OTHER_TURN;
			break;
		}
		setChanged();
		notifyObservers();
			
			
	}
	
}
